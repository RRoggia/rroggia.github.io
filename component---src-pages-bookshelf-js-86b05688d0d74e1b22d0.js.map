{"version":3,"file":"component---src-pages-bookshelf-js-86b05688d0d74e1b22d0.js","mappings":"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","sources":["webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/ReadingContentCard/index.js","webpack://rroggia.github.io/./src/components/SearchReadingContent/index.js","webpack://rroggia.github.io/./src/pages/bookshelf.js"],"sourcesContent":["export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled( GatsbyImage )`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${( note ) => {\n    switch ( note.status ) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  font-size:1.2rem;\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 100px;\n  margin-top: 11%;\n  margin-left: 48%;\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage( covers, title, emptyCover ) {\n  const coverNode = covers.find( cover => {\n    return cover.node.name === title\n  } )\n  if ( !coverNode ) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function ReadingContentCard( { title, status, coverPath, language, date, covers, emptyCover } ) {\n  return (\n    <NoteCard >\n      <h3> { title } </h3>\n      <RibbonKiller>\n        <Ribbon status={ status }>{ status }</Ribbon>\n        <BookCover\n          image={ getImage( getCoverImage( covers, `${coverPath}`, emptyCover ) ) }\n          alt={ title }\n        />\n      </RibbonKiller>\n      <p>Language: { language }</p>\n      {date ? <p>Date: { date }</p> : null}\n    </NoteCard>\n  )\n}\n","import { Placeholder } from 'gatsby-plugin-image';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Label = styled.label`\n\tpadding: 0 15px  0  0;\n  font-weight: bold;\n\twidth:20%;\n`\n\nconst Input = styled.input`\n\tall: unset;\n\twidth:80%;\n`\nconst Div = styled.div`\n\tbackground: lightpurple;\n\tborder: 1px solid;\n\tborder-color: #d0d7de;\n\tborder-radius: 5px;\n\twidth:95%;\n\tmargin: 30px 1%;\n\tpadding: 10px;\n`\n\nexport default function SearchReadingContent() {\n    const [ readingContentNameFilter, setReadingContentNameFilter ] = useState()\n\n\treturn [\n\t\treadingContentNameFilter,\n\t\t()=> (\n\t\t\t<Div>\n\t\t\t\t<Label for=\"readingContentFilter\">Filter</Label>\n\t\t\t\t<Input \n\t\t\t\t\tkey=\"readingContentFilter\"\n\t\t\t\t\tonChange={ ( { 'target': { value } } ) => {\n\t\t\t\t\t\tsetReadingContentNameFilter( value )\n\t\t\t\t\t} }\n\t\t\t\t\tplaceholder=\"e.g. Agile\"\n\t\t\t\t/>\n\t\t\t</Div>\n\t\t)\n\t]\n}\n","/* eslint-disable id-length */\nimport React, { useState } from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\nimport createNotePath from '../components/Notes/notePath'\nimport ReadingContentCard from '../components/ReadingContentCard'\nimport useSearchReadingContent from '../components/SearchReadingContent'\n\nconst Grid = styled.div`\n  width: 100%;\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n  }\n`\nconst WhitinGrid = styled.div`\n  @media (max-width: 600px) {\n    display: flex;\n    justify-items:center;\n    overflow-y:scroll;\n    & > div{\n      padding: 0px 100px 0 30px ;\n    }\n  }\n`\n\nfunction nodeToNotes( node ) {\n  return {\n    ...node.node.frontmatter,\n    'url': createNotePath( node.node.frontmatter.title )\n  }\n}\n\nexport default function Bookshelf( { data } ) {\n  const [ readingContentNameFilter, filterByName ] = useSearchReadingContent()\n  const {\n    'allMarkdownRemark': { edges },\n    'allFile': { 'edges': covers },\n    'file': emptyCover\n  } = data\n  const notes = edges.map( nodeToNotes )\n  const notesByStatus = notes\n    .reduce( ( byStatus, note ) => {\n      if ( !byStatus[ note.status ] ) {\n        byStatus[ note.status ] = []\n      }\n      byStatus[ note.status ].push( note )\n      return byStatus\n    }, {} )\n\n  return (\n    <BasePage>\n      <h2>Bookshelf</h2>\n      {filterByName()}\n      <Grid>\n        { [ 'Backlog', 'Planning', 'Reading', 'Read' ].map( status => {\n          return (\n            <div>\n              <h2>\n                { `${status} (${!notesByStatus[ status ] ? 0 : notesByStatus[ status ]\n                  .filter( b => readingContentNameFilter ? b.title.toLowerCase().includes( readingContentNameFilter.toLowerCase() ) : true )\n                  .length})` }\n              </h2>\n              <WhitinGrid key={ status }>\n              {\n                !notesByStatus[ status ] ?\n                  <p>Empty</p> :\n                  notesByStatus[ status ]\n                    .filter( b => readingContentNameFilter ? b.title.toLowerCase().includes( readingContentNameFilter.toLowerCase() ) : true )\n                    .map( b => {\n                      return (\n                        <div key={ b.title }>\n                          <ReadingContentCard\n                            key={ b.title }\n                            title={ b.title }\n                            status={ b.status }\n                            coverPath={ b.coverPath }\n                            language={ b.language }\n                            date={ b.date }\n                            covers={ covers }\n                            emptyCover={ emptyCover }\n                          />\n                        </div>\n                      )\n                    } )\n              }\n            </WhitinGrid>\n            </div>\n          )\n        } ) }\n      </Grid>\n    </BasePage>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/reading-content/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            language\n            coverPath\n            status\n            date\n          }\n        }\n      }\n    }\n    allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData( width: 150 ) \n          }\n          name\n        }\n      }\n    }\n    file(name: {eq: \"empty\"}) {\n      name\n      childImageSharp {\n        gatsbyImageData( width: 150 )\n      }\n    }\n  }\n`\n"],"names":["createPostPath","title","toLowerCase","replace","NoteCard","styled","BookCover","GatsbyImage","Ribbon","note","status","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","node","name","ReadingContentCard","coverPath","language","date","image","getImage","alt","Label","Input","Div","Grid","WhitinGrid","nodeToNotes","frontmatter","createNotePath","Bookshelf","data","useState","readingContentNameFilter","setReadingContentNameFilter","for","key","onChange","value","placeholder","useSearchReadingContent","filterByName","edges","notesByStatus","map","reduce","byStatus","push","BasePage","filter","b","includes","length"],"sourceRoot":""}