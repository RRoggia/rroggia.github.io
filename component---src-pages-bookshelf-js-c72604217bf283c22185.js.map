{"version":3,"file":"component---src-pages-bookshelf-js-c72604217bf283c22185.js","mappings":"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","sources":["webpack://rroggia.github.io/./src/allMarkdownRemarkTransformation.js","webpack://rroggia.github.io/./src/components/Posts/postPath.js","webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/ReadingContentCard/index.js","webpack://rroggia.github.io/./src/components/SearchReadingContent/index.js","webpack://rroggia.github.io/./src/pages/bookshelf.js"],"sourcesContent":["import createPostPath from './components/Posts/postPath'\nimport createNotePath from './components/Notes/notePath'\n\nexport function allMarkdownRemarkToPost(data) {\n  const { 'allMarkdownRemark': { edges } } = data\n  return edges.map((node) => (\n    {\n      ...node.node.frontmatter,\n      'excerpt': node.node.excerpt,\n      'timeToRead': node.node.timeToRead,\n      'url': createPostPath(node.node.frontmatter.title)\n    }\n  ))\n}\n\nexport function allMarkdownRemarkToNotes(data) {\n  const { 'allMarkdownRemark': { edges } } = data\n  return edges.map((node) => ({\n    ...node.node.frontmatter,\n    'html': node.node?.html,\n    'url': createNotePath(node.node.frontmatter.title)\n  }))\n}\n\nexport function transformNotesByReadingStatus(byStatus, note) {\n  if (!byStatus[note.status]) {\n    byStatus[note.status] = []\n  }\n  byStatus[note.status].push(note)\n  return byStatus\n}","export default function createPostPath( title ) {\n  return `/posts/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled( GatsbyImage )`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${( note ) => {\n    switch ( note.status ) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  font-size:1.2rem;\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 100px;\n  margin-top: 11%;\n  margin-left: 48%;\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage( covers, title, emptyCover ) {\n  const coverNode = covers.find( cover => {\n    return cover.node.name === title\n  } )\n  if ( !coverNode ) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function ReadingContentCard( { title, status, coverPath, language, date, covers, emptyCover } ) {\n  return (\n    <NoteCard >\n      <h3> { title } </h3>\n      <RibbonKiller>\n        <Ribbon status={ status }>{ status }</Ribbon>\n        <BookCover\n          image={ getImage( getCoverImage( covers, `${coverPath}`, emptyCover ) ) }\n          alt={ title }\n        />\n      </RibbonKiller>\n      <p>Language: { language }</p>\n      {date ? <p>Date: { date }</p> : null}\n    </NoteCard>\n  )\n}\n","import { Placeholder } from 'gatsby-plugin-image';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Label = styled.label`\n\tpadding: 0 15px  0  0;\n  font-weight: bold;\n\twidth:20%;\n`\n\nconst Input = styled.input`\n\tall: unset;\n\twidth:80%;\n`\nconst Div = styled.div`\n\tbackground: lightpurple;\n\tborder: 1px solid;\n\tborder-color: #d0d7de;\n\tborder-radius: 5px;\n\twidth:95%;\n\tmargin: 30px 1%;\n\tpadding: 10px;\n`\n\nexport default function SearchReadingContent() {\n    const [ readingContentNameFilter, setReadingContentNameFilter ] = useState()\n\n\treturn [\n\t\treadingContentNameFilter,\n\t\t()=> (\n\t\t\t<Div>\n\t\t\t\t<Label for=\"readingContentFilter\">Filter</Label>\n\t\t\t\t<Input \n\t\t\t\t\tkey=\"readingContentFilter\"\n\t\t\t\t\tonChange={ ( { 'target': { value } } ) => {\n\t\t\t\t\t\tsetReadingContentNameFilter( value )\n\t\t\t\t\t} }\n\t\t\t\t\tplaceholder=\"e.g. Agile\"\n\t\t\t\t/>\n\t\t\t</Div>\n\t\t)\n\t]\n}\n","/* eslint-disable id-length */\nimport React from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\nimport ReadingContentCard from '../components/ReadingContentCard'\nimport useSearchReadingContent from '../components/SearchReadingContent'\nimport { allMarkdownRemarkToNotes, transformNotesByReadingStatus } from '../allMarkdownRemarkTransformation'\n\nconst Grid = styled.div`\n  width: 100%;\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n  }\n`\nconst WhitinGrid = styled.div`\n  @media (max-width: 600px) {\n    display: flex;\n    justify-items:center;\n    overflow-y:scroll;\n    & > div{\n      padding: 0px 100px 0 30px ;\n    }\n  }\n`\n\nexport default function Bookshelf({ data }) {\n  const [readingContentNameFilter, filterByName] = useSearchReadingContent()\n  const {\n    'allFile': { 'edges': covers },\n    'file': emptyCover\n  } = data\n\n  const notesByStatus = allMarkdownRemarkToNotes(data)\n    .reduce(transformNotesByReadingStatus, {})\n\n  return (\n    <BasePage>\n      <h2>Bookshelf</h2>\n      {filterByName()}\n      <Grid>\n        {['Backlog', 'Planning', 'Reading', 'Read'].map(status => {\n          return (\n            <div>\n              <h2>\n                {`${status} (${!notesByStatus[status] ? 0 : notesByStatus[status]\n                  .filter(b => readingContentNameFilter ? b.title.toLowerCase().includes(readingContentNameFilter.toLowerCase()) : true)\n                  .length})`}\n              </h2>\n              <WhitinGrid key={status}>\n                {\n                  !notesByStatus[status] ?\n                    <p>Empty</p> :\n                    notesByStatus[status]\n                      .filter(b => readingContentNameFilter ? b.title.toLowerCase().includes(readingContentNameFilter.toLowerCase()) : true)\n                      .map(b => {\n                        return (\n                          <div key={b.title}>\n                            <ReadingContentCard\n                              key={b.title}\n                              title={b.title}\n                              status={b.status}\n                              coverPath={b.coverPath}\n                              language={b.language}\n                              date={b.date}\n                              covers={covers}\n                              emptyCover={emptyCover}\n                            />\n                          </div>\n                        )\n                      })\n                }\n              </WhitinGrid>\n            </div>\n          )\n        })}\n      </Grid>\n    </BasePage>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/reading-content/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            language\n            coverPath\n            status\n            date\n          }\n        }\n      }\n    }\n    allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData( width: 150 ) \n          }\n          name\n        }\n      }\n    }\n    file(name: {eq: \"empty\"}) {\n      name\n      childImageSharp {\n        gatsbyImageData( width: 150 )\n      }\n    }\n  }\n`\n"],"names":["allMarkdownRemarkToPost","data","edges","map","node","frontmatter","excerpt","timeToRead","title","toLowerCase","replace","allMarkdownRemarkToNotes","html","createNotePath","transformNotesByReadingStatus","byStatus","note","status","push","createPostPath","NoteCard","styled","BookCover","GatsbyImage","Ribbon","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","name","ReadingContentCard","coverPath","language","date","image","getImage","alt","Label","Input","Div","Grid","WhitinGrid","Bookshelf","useState","readingContentNameFilter","setReadingContentNameFilter","for","key","onChange","value","placeholder","useSearchReadingContent","filterByName","notesByStatus","reduce","BasePage","filter","b","includes","length"],"sourceRoot":""}