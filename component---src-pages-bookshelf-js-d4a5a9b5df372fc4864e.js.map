{"version":3,"file":"component---src-pages-bookshelf-js-d4a5a9b5df372fc4864e.js","mappings":"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","sources":["webpack://rroggia.github.io/./src/allMarkdownRemarkTransformation.js","webpack://rroggia.github.io/./src/components/Posts/postPath.js","webpack://rroggia.github.io/./src/components/NoteLink/index.js","webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/ReadingContentCard/index.js","webpack://rroggia.github.io/./src/components/SearchReadingContent/index.js","webpack://rroggia.github.io/./src/pages/bookshelf.js"],"sourcesContent":["import createPostPath from './components/Posts/postPath'\nimport createNotePath from './components/Notes/notePath'\n\nexport function allMarkdownRemarkToPost(data) {\n  const { 'allMarkdownRemark': { edges } } = data\n  return edges.map((node) => (\n    {\n      ...node.node.frontmatter,\n      'excerpt': node.node.excerpt,\n      'timeToRead': node.node.timeToRead,\n      'url': createPostPath(node.node.frontmatter.title)\n    }\n  ))\n}\n\nexport function allMarkdownRemarkToNotes(data) {\n  const { 'allMarkdownRemark': { edges } } = data\n  return edges.map((node) => ({\n    ...node.node.frontmatter,\n    'html': node.node?.html,\n    'url': createNotePath(node.node.frontmatter.title)\n  }))\n}\n\nexport function transformNotesByReadingStatus(byStatus, note) {\n  if (!byStatus[note.status]) {\n    byStatus[note.status] = []\n  }\n  byStatus[note.status].push(note)\n  return byStatus\n}","export default function createPostPath( title ) {\n  return `/posts/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport createNotePath from '../Notes/notePath'\n\nconst WrappedA = styled.a`\n  margin-bottom: 3rem;\n`\n\nexport default function NoteLink( { title, children } ) {\n  return (\n    <WrappedA href={ createNotePath( title ) }>\n      {children}\n    </WrappedA>\n  )\n}\n","export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled(GatsbyImage)`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${(note) => {\n    switch (note.status) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  font-size:1.2rem;\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 100px;\n  margin-top: 11%;\n  margin-left: 48%;\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage(covers, title, emptyCover) {\n  const coverNode = covers.find(cover => {\n    return cover.node.name === title\n  })\n  if (!coverNode) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function ReadingContentCard({ title, subtitle, status, coverPath, language, date, covers, emptyCover, hasRibbon = true }) {\n  return (\n    <NoteCard >\n      <h3> {title} </h3>\n      {subtitle ? <h4> {subtitle} </h4> : <></>}\n      <RibbonKiller>\n        {hasRibbon ? <Ribbon status={status}>{status}</Ribbon> : <></>}\n        <BookCover\n          image={getImage(getCoverImage(covers, `${coverPath}`, emptyCover))}\n          alt={title}\n        />\n      </RibbonKiller>\n      <p>Language: {language}</p>\n      {date ? <p>Date: {date}</p> : <></>}\n    </NoteCard>\n  )\n}\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Label = styled.label`\n\tpadding: 0 15px  0  0;\n  font-weight: bold;\n\twidth:20%;\n`\n\nconst Input = styled.input`\n\tall: unset;\n\twidth:80%;\n`\nconst Div = styled.div`\n\tbackground: lightpurple;\n\tborder: 1px solid;\n\tborder-color: #d0d7de;\n\tborder-radius: 5px;\n\twidth:95%;\n\tmargin: 30px 1%;\n\tpadding: 10px;\n`\n\nexport default function SearchReadingContent() {\n    const [ readingContentNameFilter, setReadingContentNameFilter ] = useState()\n\n\treturn [\n\t\treadingContentNameFilter,\n\t\tfunction filterByName () {\n      return (\n\t\t\t<Div>\n\t\t\t\t<Label htmlFor=\"readingContentFilter\">Filter</Label>\n\t\t\t\t<Input \n\t\t\t\t\tkey=\"readingContentFilter\"\n\t\t\t\t\tonChange={ ( { 'target': { value } } ) => {\n\t\t\t\t\t\tsetReadingContentNameFilter( value )\n\t\t\t\t\t} }\n\t\t\t\t\tplaceholder=\"e.g. Agile\"\n\t\t\t\t/>\n\t\t\t</Div>\n      )\n    }\n\t]\n}\n","/* eslint-disable id-length */\nimport React from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\nimport ReadingContentCard from '../components/ReadingContentCard'\nimport useSearchReadingContent from '../components/SearchReadingContent'\nimport { allMarkdownRemarkToNotes, transformNotesByReadingStatus } from '../allMarkdownRemarkTransformation'\nimport NoteLink from '../components/NoteLink'\n\nconst Grid = styled.div`\n  width: 100%;\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n  }\n`\nconst WhitinGrid = styled.div`\n  @media (max-width: 600px) {\n    display: flex;\n    justify-items:center;\n    overflow-y:scroll;\n    & > div{\n      padding: 0px 100px 0 30px ;\n    }\n  }\n`\n\nconst CheckNotesAction = styled.p`\n  background: #0000000d;\n  width: 50%;\n  text-align: center;\n  display: inline;\n  padding: 0.3rem;\n  border-radius: 0.3rem;\n`\n\nexport default function Bookshelf({ data }) {\n  const [readingContentNameFilter, filterByName] = useSearchReadingContent()\n  const {\n    'allFile': { 'edges': covers },\n    'file': emptyCover\n  } = data\n\n  const notesByStatus = allMarkdownRemarkToNotes(data)\n    .reduce(transformNotesByReadingStatus, {})\n\n  const filterByTitle = b => readingContentNameFilter ? b.title.toLowerCase().includes(readingContentNameFilter.toLowerCase()) : true\n\n  return (\n    <BasePage>\n      <h2>Bookshelf</h2>\n      {filterByName()}\n      <Grid>\n        {['Backlog', 'Planning', 'Reading', 'Read'].map(status => {\n          return (\n            <div key={status}>\n              <h2>\n                {`${status} (${!notesByStatus[status] ? 0 : notesByStatus[status]\n                  .filter(filterByTitle)\n                  .length})`}\n              </h2>\n              <WhitinGrid key={status}>\n                {\n                  !notesByStatus[status] ?\n                    <p>Empty</p> :\n                    notesByStatus[status]\n                      .filter(filterByTitle)\n                      .map(b => {\n                        return (\n                          <div key={b.title}>\n                            <ReadingContentCard\n                              key={b.title}\n                              title={b.title}\n                              subtitle={b.subtitle}\n                              status={b.status}\n                              coverPath={b.coverPath}\n                              language={b.language}\n                              date={b.date}\n                              covers={covers}\n                              emptyCover={emptyCover}\n                              hasRibbon={false}\n                            />\n                            {b.html ? <NoteLink title={b.title}><CheckNotesAction>Check my notes</CheckNotesAction></NoteLink> : <></>}\n                          </div>\n                        )\n                      })\n                }\n              </WhitinGrid>\n            </div>\n          )\n        })}\n      </Grid>\n    </BasePage>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/reading-content/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            subtitle\n            language\n            coverPath\n            status\n            date\n          }\n        }\n      }\n    }\n    allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData( width: 150 ) \n          }\n          name\n        }\n      }\n    }\n    file(name: {eq: \"empty\"}) {\n      name\n      childImageSharp {\n        gatsbyImageData( width: 150 )\n      }\n    }\n  }\n`\n"],"names":["allMarkdownRemarkToPost","data","edges","map","node","frontmatter","excerpt","timeToRead","title","toLowerCase","replace","allMarkdownRemarkToNotes","html","createNotePath","transformNotesByReadingStatus","byStatus","note","status","push","WrappedA","styled","NoteLink","children","href","createPostPath","NoteCard","BookCover","GatsbyImage","Ribbon","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","name","ReadingContentCard","subtitle","coverPath","language","date","hasRibbon","image","getImage","alt","Label","Input","Div","Grid","WhitinGrid","CheckNotesAction","Bookshelf","useState","readingContentNameFilter","setReadingContentNameFilter","htmlFor","key","onChange","value","placeholder","useSearchReadingContent","filterByName","notesByStatus","reduce","filterByTitle","b","includes","BasePage","filter","length"],"sourceRoot":""}