{"version":3,"sources":["webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/ReadingContentCard/index.js","webpack://rroggia.github.io/./src/pages/bookshelf.js"],"names":["createPostPath","title","toLowerCase","replace","NoteCard","styled","BookCover","GatsbyImage","Ribbon","note","status","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","node","name","ReadingContentCard","coverPath","language","date","image","getImage","alt","Grid","WhitinGrid","nodeToNotes","frontmatter","createNotePath","Bookshelf","data","useState","readingContentNameFilter","setReadingContentNameFilter","edges","notesByStatus","map","reduce","byStatus","push","onChange","value","filter","b","includes","length","key"],"mappings":"2HAAe,SAASA,EAAgBC,GACtC,MAAM,UAAWA,EAAMC,cAAcC,QAAS,uEAAQ,K,qICGlDC,EAAWC,oBAAH,wEAAGA,CAAH,qBAGRC,GAAYD,QAAQE,KAAX,oFAAGF,CAAH,mDAMTG,EAASH,oBAAH,sEAAGA,CAAH,uJAEU,SAAEI,GACpB,OAASA,EAAKC,QACZ,IAAK,OACH,MAAO,QACT,IAAK,QACH,MAAO,SACT,QACE,MAAO,UAWTC,EAAeN,oBAAH,4EAAGA,CAAH,8EAQlB,SAASO,EAAeC,EAAQZ,EAAOa,GACrC,IAAMC,EAAYF,EAAOG,MAAM,SAAAC,GAC7B,OAAOA,EAAMC,KAAKC,OAASlB,KAE7B,OAAMc,EAGCA,EAAUG,KAFRJ,EAKI,SAASM,EAAT,GAAiG,IAAlEnB,EAAiE,EAAjEA,MAAOS,EAA0D,EAA1DA,OAAQW,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,KAAMV,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,WAC9F,OACE,gBAACV,EAAD,KACE,8BAAOH,EAAP,KACA,gBAACU,EAAD,KACE,gBAACH,EAAD,CAAQE,OAASA,GAAWA,GAC5B,gBAACJ,EAAD,CACEkB,OAAQC,OAAUb,EAAeC,EAAF,GAAaQ,EAAaP,IACzDY,IAAMzB,KAGV,sCAAeqB,GACf,kCAAWC,M,qICxDXI,EAAOtB,oBAAH,uDAAGA,CAAH,qIAUJuB,EAAavB,oBAAH,6DAAGA,CAAH,sHAWhB,SAASwB,EAAaX,GACpB,OAAO,OAAP,UACKA,EAAKA,KAAKY,YADf,CAEE,KAAOC,OAAgBb,EAAKA,KAAKY,YAAY7B,SAIlC,SAAS+B,EAAT,GAAgC,IAAVC,EAAS,EAATA,KAAS,GACsBC,gBAA1DC,EADoC,KACVC,EADU,KAInBC,EAGrBJ,EAPwC,kBAInBI,MACDxB,EAEpBoB,EAPwC,cAMlCnB,EACNmB,EAPwC,KAStCK,EADQD,EAAME,IAAKV,GAEtBW,QAAQ,SAAEC,EAAUhC,GAKnB,OAJMgC,EAAUhC,EAAKC,UACnB+B,EAAUhC,EAAKC,QAAW,IAE5B+B,EAAUhC,EAAKC,QAASgC,KAAMjC,GACvBgC,IACN,IAEL,OACE,gBAAC,IAAD,KACE,yBAAOE,SAAW,YAAgC,IAAhBC,EAAe,SAAfA,MAChCR,EAA6BQ,MAG/B,gBAACjB,EAAD,KACI,CAAE,UAAW,WAAY,UAAW,QAASY,KAAK,SAAA7B,GAClD,OACE,2BACE,0BACOA,EADP,MACmB4B,EAAe5B,GAAe4B,EAAe5B,GAC3DmC,QAAQ,SAAAC,GAAC,OAAIX,GAA2BW,EAAE7C,MAAMC,cAAc6C,SAAUZ,EAAyBjC,kBACjG8C,OAFwC,GAD7C,KAKA,gBAACpB,EAAD,CAAYqB,IAAMvC,GAEf4B,EAAe5B,GAEd4B,EAAe5B,GACZmC,QAAQ,SAAAC,GAAC,OAAIX,GAA2BW,EAAE7C,MAAMC,cAAc6C,SAAUZ,EAAyBjC,kBACjGqC,KAAK,SAAAO,GACJ,OACE,uBAAKG,IAAMH,EAAE7C,OACX,gBAAC,IAAD,CACEgD,IAAMH,EAAE7C,MACRA,MAAQ6C,EAAE7C,MACVS,OAASoC,EAAEpC,OACXW,UAAYyB,EAAEzB,UACdC,SAAWwB,EAAExB,SACbC,KAAOuB,EAAEvB,KACTV,OAASA,EACTC,WAAaA,QAdvB","file":"component---src-pages-bookshelf-js-f9561119059530174a29.js","sourcesContent":["export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled( GatsbyImage )`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${( note ) => {\n    switch ( note.status ) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  font-size:1.2rem;\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 100px;\n  margin-top: 11%;\n  margin-left: 48%;\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage( covers, title, emptyCover ) {\n  const coverNode = covers.find( cover => {\n    return cover.node.name === title\n  } )\n  if ( !coverNode ) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function ReadingContentCard( { title, status, coverPath, language, date, covers, emptyCover } ) {\n  return (\n    <NoteCard >\n      <h3> { title } </h3>\n      <RibbonKiller>\n        <Ribbon status={ status }>{ status }</Ribbon>\n        <BookCover\n          image={ getImage( getCoverImage( covers, `${coverPath}`, emptyCover ) ) }\n          alt={ title }\n        />\n      </RibbonKiller>\n      <p>Language: { language }</p>\n      <p>Date: { date }</p>\n    </NoteCard>\n  )\n}\n","/* eslint-disable id-length */\nimport React, { useState } from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\nimport createNotePath from '../components/Notes/notePath'\nimport ReadingContentCard from '../components/ReadingContentCard'\nconst Grid = styled.div`\n  width: 100%;\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n  }\n`\nconst WhitinGrid = styled.div`\n  @media (max-width: 600px) {\n    display: flex;\n    justify-items:center;\n    overflow-y:scroll;\n    & > div{\n      padding: 0px 100px 0 30px ;\n    }\n  }\n`\n\nfunction nodeToNotes( node ) {\n  return {\n    ...node.node.frontmatter,\n    'url': createNotePath( node.node.frontmatter.title )\n  }\n}\n\nexport default function Bookshelf( { data } ) {\n  const [ readingContentNameFilter, setReadingContentNameFilter ] = useState()\n\n  const {\n    'allMarkdownRemark': { edges },\n    'allFile': { 'edges': covers },\n    'file': emptyCover\n  } = data\n  const notes = edges.map( nodeToNotes )\n  const notesByStatus = notes\n    .reduce( ( byStatus, note ) => {\n      if ( !byStatus[ note.status ] ) {\n        byStatus[ note.status ] = []\n      }\n      byStatus[ note.status ].push( note )\n      return byStatus\n    }, {} )\n\n  return (\n    <BasePage>\n      <input onChange={ ( { 'target': { value } } ) => {\n        setReadingContentNameFilter( value )\n      } }\n      />\n      <Grid>\n        { [ 'Backlog', 'Planning', 'Reading', 'Read' ].map( status => {\n          return (\n            <div>\n              <h2>\n                { `${status} (${!notesByStatus[ status ] ? 0 : notesByStatus[ status ]\n                  .filter( b => readingContentNameFilter ? b.title.toLowerCase().includes( readingContentNameFilter.toLowerCase() ) : true )\n                  .length})` }\n              </h2>\n              <WhitinGrid key={ status }>\n              {\n                !notesByStatus[ status ] ?\n                  <p>Empty</p> :\n                  notesByStatus[ status ]\n                    .filter( b => readingContentNameFilter ? b.title.toLowerCase().includes( readingContentNameFilter.toLowerCase() ) : true )\n                    .map( b => {\n                      return (\n                        <div key={ b.title }>\n                          <ReadingContentCard\n                            key={ b.title }\n                            title={ b.title }\n                            status={ b.status }\n                            coverPath={ b.coverPath }\n                            language={ b.language }\n                            date={ b.date }\n                            covers={ covers }\n                            emptyCover={ emptyCover }\n                          />\n                        </div>\n                      )\n                    } )\n              }\n            </WhitinGrid>\n            </div>\n          )\n        } ) }\n      </Grid>\n    </BasePage>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/reading-content/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            language\n            coverPath\n            status\n            date(fromNow:true)\n          }\n        }\n      }\n    }\n    allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData( width: 150 ) \n          }\n          name\n        }\n      }\n    }\n    file(name: {eq: \"empty\"}) {\n      name\n      childImageSharp {\n        gatsbyImageData( width: 150 )\n      }\n    }\n  }\n`\n"],"sourceRoot":""}