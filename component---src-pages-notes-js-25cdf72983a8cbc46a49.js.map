{"version":3,"sources":["webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/Notes/Notes.js","webpack://rroggia.github.io/./src/pages/notes.js"],"names":["createPostPath","title","toLowerCase","replace","Grid","styled","NoteLink","Title","NoteCard","BookCover","GatsbyImage","Ribbon","note","status","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","node","name","Notes","notes","data","useStaticQuery","map","n","href","createNotePath","key","image","getImage","coverPath","alt","nodeToNotes","frontmatter","edges","BasePage"],"mappings":"8NAAe,SAASA,EAAgBC,GACtC,MAAM,UAAWA,EAAMC,cAAcC,QAAS,uEAAQ,KCMxD,IAAMC,EAAOC,oBAAH,mDAAGA,CAAH,8IAaJC,EAAWD,kBAAH,uDAAGA,CAAH,yBAIRE,EAAQF,mBAAH,oDAAGA,CAAH,MAGLG,EAAWH,oBAAH,uDAAGA,CAAH,qBAGRI,GAAYJ,QAAQK,KAAX,mEAAGL,CAAH,mDAMTM,EAASN,oBAAH,qDAAGA,CAAH,qIAEU,SAAEO,GACpB,OAASA,EAAKC,QACZ,IAAK,OACH,MAAO,QACT,IAAK,QACH,MAAO,SACT,QACE,MAAO,UAWTC,EAAeT,oBAAH,2DAAGA,CAAH,8EAQlB,SAASU,EAAeC,EAAQf,EAAOgB,GACrC,IAAMC,EAAYF,EAAOG,MAAM,SAAAC,GAC7B,OAAOA,EAAMC,KAAKC,OAASrB,KAE7B,OAAMiB,EAGCA,EAAUG,KAFRJ,EAKI,SAASM,EAAT,GAA6B,IAAXC,EAAU,EAAVA,MACzBC,GAAOC,QAAe,cAoBEV,EAAaS,EArBF,cAsBzBR,EAAeQ,EAtBU,KAuBzC,OACE,gCACE,gBAAClB,EAAD,qBACA,yMACA,gBAACH,EAAD,KACIoB,GAASA,EAAMG,KAAK,SAAAC,GAAC,OACrB,gBAACtB,EAAD,CACEuB,KAAOC,EAAgBF,EAAE3B,OACzB8B,IAAMH,EAAE3B,OAER,gBAACO,EAAD,KACE,8BAAOoB,EAAE3B,MAAT,KACA,gBAACa,EAAD,KACE,gBAACH,EAAD,CAAQE,OAASe,EAAEf,QAAWe,EAAEf,QAChC,gBAACJ,EAAD,CACEuB,OAAQC,OAAUlB,EAAeC,EAAF,GAAaY,EAAEM,UAAajB,IAC3DkB,IAAMP,EAAE3B,gBC1G1B,SAASmC,EAAaf,GACpB,OAAO,OAAP,UACKA,EAAKA,KAAKgB,YADf,CAEE,IAAOP,EAAgBT,EAAKA,KAAKgB,YAAYpC,SAIjD,IAWA,EAXkB,SAAC,GAAgB,IAE3BuB,EAF0B,EAAZC,KAAY,kBACDa,MACXX,IAAKS,GAEzB,OACE,gBAACG,EAAA,EAAD,KACE,gBAAChB,EAAD,CAAOC,MAAQA","file":"component---src-pages-notes-js-25cdf72983a8cbc46a49.js","sourcesContent":["export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","/* eslint-disable id-length */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport createNotePath from './notePath'\n\nconst Grid = styled.div`\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n    & > h2 {\n      text-align: left;\n    }\n  }\n`\n\nconst NoteLink = styled.a`\n  margin-bottom: 3rem;\n`\n\nconst Title = styled.h2`\n`\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled( GatsbyImage )`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${( note ) => {\n    switch ( note.status ) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 80px;\n  margin-top: 10%;\n  margin-left: 58%;\n\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage( covers, title, emptyCover ) {\n  const coverNode = covers.find( cover => {\n    return cover.node.name === title\n  } )\n  if ( !coverNode ) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function Notes( { notes } ) {\n  const data = useStaticQuery( graphql`\n    query Covers {\n      allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n        edges {\n          node {\n            childImageSharp {\n              gatsbyImageData( width: 150 ) \n            }\n            name\n          }\n        }\n      }\n      file(name: {eq: \"empty\"}) {\n        name\n        childImageSharp {\n          gatsbyImageData( width: 150 )\n        }\n      }\n    }\n  ` )\n  const { 'allFile': { 'edges': covers } } = data\n  const { 'file': emptyCover } = data\n  return (\n    <>\n      <Title>My notes ...</Title>\n      <p>When I'm reading books, articles, or technical stuff I like to highlight the text and summarize what I read, then I can have access to the information without a big effort.</p>\n      <Grid>\n        { notes && notes.map( n => (\n          <NoteLink\n            href={ createNotePath( n.title ) }\n            key={ n.title }\n          >\n            <NoteCard >\n              <h3> { n.title } </h3>\n              <RibbonKiller>\n                <Ribbon status={ n.status }>{ n.status }</Ribbon>\n                <BookCover\n                  image={ getImage( getCoverImage( covers, `${n.coverPath}`, emptyCover ) ) }\n                  alt={ n.title }\n                />\n              </RibbonKiller>\n            </NoteCard>\n          </NoteLink>\n        ) )}\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport Notes from '../components/Notes/Notes'\nimport createNotePath from '../components/Notes/notePath'\n\nimport { graphql } from 'gatsby'\n\nfunction nodeToNotes( node ) {\n  return {\n    ...node.node.frontmatter,\n    'url': createNotePath( node.node.frontmatter.title )\n  }\n}\n\nconst NotesPage = ( { data } ) => {\n  const { 'allMarkdownRemark': { edges } } = data\n  const notes = edges.map( nodeToNotes )\n\n  return (\n    <BasePage>\n      <Notes notes={ notes } />\n    </BasePage>\n  )\n}\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/notes/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            language\n            coverPath\n            status\n            date(fromNow:true)\n          }\n        }\n      }\n    }\n  }\n`\n\n"],"sourceRoot":""}