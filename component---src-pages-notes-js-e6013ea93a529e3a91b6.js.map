{"version":3,"sources":["webpack://rroggia.github.io/./src/components/Notes/notePath.js","webpack://rroggia.github.io/./src/components/ReadingContentCard/index.js","webpack://rroggia.github.io/./src/components/NoteLink/index.js","webpack://rroggia.github.io/./src/components/Notes/Notes.js","webpack://rroggia.github.io/./src/pages/notes.js"],"names":["createPostPath","title","toLowerCase","replace","NoteCard","styled","BookCover","GatsbyImage","Ribbon","note","status","RibbonKiller","getCoverImage","covers","emptyCover","coverNode","find","cover","node","name","ReadingContentCard","coverPath","language","date","image","getImage","alt","WrappedA","NoteLink","children","href","createNotePath","Grid","Title","Notes","notes","data","useStaticQuery","map","n","key","nodeToNotes","frontmatter","edges","filter","edge","html","BasePage"],"mappings":"2HAAe,SAASA,EAAgBC,GACtC,MAAM,UAAWA,EAAMC,cAAcC,QAAS,uEAAQ,K,qICGlDC,EAAWC,oBAAH,wEAAGA,CAAH,qBAGRC,GAAYD,QAAQE,KAAX,oFAAGF,CAAH,mDAMTG,EAASH,oBAAH,sEAAGA,CAAH,uJAEU,SAAEI,GACpB,OAASA,EAAKC,QACZ,IAAK,OACH,MAAO,QACT,IAAK,QACH,MAAO,SACT,QACE,MAAO,UAWTC,EAAeN,oBAAH,4EAAGA,CAAH,8EAQlB,SAASO,EAAeC,EAAQZ,EAAOa,GACrC,IAAMC,EAAYF,EAAOG,MAAM,SAAAC,GAC7B,OAAOA,EAAMC,KAAKC,OAASlB,KAE7B,OAAMc,EAGCA,EAAUG,KAFRJ,EAKI,SAASM,EAAT,GAAiG,IAAlEnB,EAAiE,EAAjEA,MAAOS,EAA0D,EAA1DA,OAAQW,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,KAAMV,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,WAC9F,OACE,gBAACV,EAAD,KACE,8BAAOH,EAAP,KACA,gBAACU,EAAD,KACE,gBAACH,EAAD,CAAQE,OAASA,GAAWA,GAC5B,gBAACJ,EAAD,CACEkB,OAAQC,OAAUb,EAAeC,EAAF,GAAaQ,EAAaP,IACzDY,IAAMzB,KAGV,sCAAeqB,GACf,kCAAWC,M,+IC3DXI,EAAWtB,kBAAH,6DAAGA,CAAH,yBAIC,SAASuB,EAAT,GAA0C,IAArB3B,EAAoB,EAApBA,MAAO4B,EAAa,EAAbA,SACzC,OACE,gBAACF,EAAD,CAAUG,MAAOC,OAAgB9B,IAC9B4B,GCJP,IAAMG,EAAO3B,oBAAH,mDAAGA,CAAH,8IAaJ4B,EAAQ5B,mBAAH,oDAAGA,CAAH,MAGI,SAAS6B,EAAT,GAA6B,IAAXC,EAAU,EAAVA,MACzBC,GAAOC,QAAe,cAoBExB,EAAauB,EArBF,cAsBzBtB,EAAesB,EAtBU,KAuBzC,OACE,gCACE,gBAACH,EAAD,qBACA,yMACA,gBAACD,EAAD,KACIG,GAASA,EAAMG,KAAK,SAAAC,GAAC,OACrB,gBAACX,EAAD,CACE3B,MAAQsC,EAAEtC,MACVuC,IAAMD,EAAEtC,OAER,gBAACmB,EAAA,EAAD,CACEnB,MAAQsC,EAAEtC,MACVS,OAAS6B,EAAE7B,OACXW,UAAYkB,EAAElB,UACdC,SAAWiB,EAAEjB,SACbC,KAAOgB,EAAEhB,KACTV,OAASA,EACTC,WAAaA,UCxD3B,SAAS2B,EAAavB,GACpB,OAAO,OAAP,UACKA,EAAKA,KAAKwB,YADf,CAEE,KAAOX,OAAgBb,EAAKA,KAAKwB,YAAYzC,SAIjD,IAaA,EAbkB,SAAC,GAAgB,IAE3BkC,EAF0B,EAAZC,KAAY,kBACDO,MAE5BC,QAAQ,SAAAC,GAAI,MAAuB,KAAnBA,EAAK3B,KAAK4B,QAC1BR,IAAKG,GAER,OACE,gBAACM,EAAA,EAAD,KACE,gBAACb,EAAD,CAAOC,MAAQA","file":"component---src-pages-notes-js-e6013ea93a529e3a91b6.js","sourcesContent":["export default function createPostPath( title ) {\n  return `/notes/${title.toLowerCase().replace( /\\s/ug, '-' )}`\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst NoteCard = styled.div`\n  display: inline;\n`\nconst BookCover = styled( GatsbyImage )`\n  @media (max-width: 600px) {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Ribbon = styled.div`\n  color: white;\n  background-color: ${( note ) => {\n    switch ( note.status ) {\n      case 'Read':\n        return 'green'\n      case 'Notes':\n        return 'orange'\n      default:\n        return 'red'\n    }\n  }};\n  font-size:1.2rem;\n  position: absolute;\n  transform: rotate(45deg);\n  z-index: 1;\n  width: 100px;\n  margin-top: 11%;\n  margin-left: 48%;\n`\nconst RibbonKiller = styled.div`\n  overflow: hidden;\n  display: block;\n  width: 150px;\n  position: relative;\n  margin: auto;\n`\n\nfunction getCoverImage( covers, title, emptyCover ) {\n  const coverNode = covers.find( cover => {\n    return cover.node.name === title\n  } )\n  if ( !coverNode ) {\n    return emptyCover\n  }\n  return coverNode.node\n}\n\nexport default function ReadingContentCard( { title, status, coverPath, language, date, covers, emptyCover } ) {\n  return (\n    <NoteCard >\n      <h3> { title } </h3>\n      <RibbonKiller>\n        <Ribbon status={ status }>{ status }</Ribbon>\n        <BookCover\n          image={ getImage( getCoverImage( covers, `${coverPath}`, emptyCover ) ) }\n          alt={ title }\n        />\n      </RibbonKiller>\n      <p>Language: { language }</p>\n      <p>Date: { date }</p>\n    </NoteCard>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport createNotePath from '../Notes/notePath'\n\nconst WrappedA = styled.a`\n  margin-bottom: 3rem;\n`\n\nexport default function NoteLink( { title, children } ) {\n  return (\n    <WrappedA href={ createNotePath( title ) }>\n      {children}\n    </WrappedA>\n  )\n}\n","/* eslint-disable id-length */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport ReadingContentCard from '../ReadingContentCard/index'\nimport NoteLink from '../NoteLink/index'\n\nconst Grid = styled.div`\n  display: inline-grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  text-align: center;\n\n  @media (max-width: 600px) {\n    display: block;\n    & > h2 {\n      text-align: left;\n    }\n  }\n`\n\nconst Title = styled.h2`\n`\n\nexport default function Notes( { notes } ) {\n  const data = useStaticQuery( graphql`\n    query Covers {\n      allFile(filter: { extension : {in: [\"jpg\", \"png\"]}, absolutePath: { glob:\"**/covers/**\"}}) {\n        edges {\n          node {\n            childImageSharp {\n              gatsbyImageData( width: 150 ) \n            }\n            name\n          }\n        }\n      }\n      file(name: {eq: \"empty\"}) {\n        name\n        childImageSharp {\n          gatsbyImageData( width: 150 )\n        }\n      }\n    }\n  ` )\n  const { 'allFile': { 'edges': covers } } = data\n  const { 'file': emptyCover } = data\n  return (\n    <>\n      <Title>My notes ...</Title>\n      <p>When I'm reading books, articles, or technical stuff I like to highlight the text and summarize what I read, then I can have access to the information without a big effort.</p>\n      <Grid>\n        { notes && notes.map( n => (\n          <NoteLink\n            title={ n.title }\n            key={ n.title }\n          >\n            <ReadingContentCard\n              title={ n.title }\n              status={ n.status }\n              coverPath={ n.coverPath }\n              language={ n.language }\n              date={ n.date }\n              covers={ covers }\n              emptyCover={ emptyCover }\n            />\n          </NoteLink>\n        ) )}\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\nimport BasePage from '../components/Base/BasePage'\nimport Notes from '../components/Notes/Notes'\nimport createNotePath from '../components/Notes/notePath'\n\nimport { graphql } from 'gatsby'\n\nfunction nodeToNotes( node ) {\n  return {\n    ...node.node.frontmatter,\n    'url': createNotePath( node.node.frontmatter.title )\n  }\n}\n\nconst NotesPage = ( { data } ) => {\n  const { 'allMarkdownRemark': { edges } } = data\n  const notes = edges\n    .filter( edge => edge.node.html !== '' )\n    .map( nodeToNotes )\n\n  return (\n    <BasePage>\n      <Notes notes={ notes } />\n    </BasePage>\n  )\n}\n\nexport default NotesPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: {fileAbsolutePath: {glob: \"**/reading-content/**\"}}, sort: {order: DESC, fields: [frontmatter___date]}) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            language\n            coverPath\n            status\n            date(fromNow:true)\n          }\n        }\n      }\n    }\n  }\n`\n\n"],"sourceRoot":""}