{
    "componentChunkName": "component---src-templates-folder-template-js",
    "path": "/engineer-diary/aws/management-and-governance",
    "result": {"pageContext":{"parentPath":"/engineer-diary/aws/management-and-governance","files":[{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/management-and-governance/cloudtrail.md","html":"<p><a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>CloudTrail is a regional services that is fully managed by AWS that records activities by IAM entities and AWS Services as events to enable to follow any changes in your AWS account. It's common used for auditing, governance and compliance.</p>\n<p>When you create an account CloudTrail starts to record the events that can be seen in the Events History. You can create Tails to customize the events being recorded and retention period.</p>\n<p>Important to notice CloudTrail is not a real time service, the service logs the records usually within 15 minutes but without time delivery guarantee.</p>\n<h2>Core concepts</h2>\n<p>The <strong>Event History</strong> is a viewable, searchable and downloadable record of the past 90 days. One Event History is created for each region during the account creation and stores Management Events for 90 days. You can use the event history to check any operational changes done to your AWS account for a specific region.</p>\n<p>CloudTrail records the activities in the account, it calls it <strong>events</strong>. There are three types of events :</p>\n<ul>\n<li><strong>Management</strong>: Control plane operations. Example, managing AWS Resources.</li>\n<li><strong>Data</strong>: Data plane operations, information about the resource operations performed on or in a resource. Example, uploading file to s3.</li>\n<li><strong>Insight</strong>: Unusual API call rate or error rate activity in your AWS account.</li>\n</ul>\n<p>By default only the Management Events are recorded, but you can create custom Trails to record other data.</p>\n<p>A <strong>Trail</strong> is a configuration that enables delivery of CloudTrail Events to S3, CloudWatch Logs and Events. When you create a tail you can specify its retention period and the events you want it to record.</p>\n<p>You can create two types of trails:</p>\n<ul>\n<li><strong>One region</strong>: It stores the events from the region you selected in the S3 bucket. </li>\n<li><strong>All region</strong>: It stores the events from all the regions in the S3 bucket. Trails created in the console are multi-region trails.</li>\n</ul>\n<p>In both scenarios the bucket the events will be stored can be in any region. The trails support SS3-KMS encryption. And you can configure it to send log to CloudWatch logs.</p>\n<p>There's also the opportunity to create an <strong>organization trail,</strong> only for accounts in using the AWS Organizations service, which will centralized the records from all accounts in an organization.</p>\n<p>AWS CloudTrail records the regional and global services with different behaviors. While regional services, will record the events in the regional trails, global services will record the events to US East (N. Virginia). This applies to services like IAM, STS, CloudFront.</p>","frontmatter":{"title":"CloudTrail"},"isFile":true,"fileName":"cloudtrail"},{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/management-and-governance/config.md","html":"<p><a href=\"https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>AWS Config is a regional service fully managed AWS service that allows you to continually assess, monitor and record resources configurations. When enabling the service, you can choose which AWS resources you want to record the changes in the configuration. These configuration changes are stored in a S3 bucket. You can also create Config Rules that determine what are the expected configuration for the resources. The resources are evaluated against the rules to determine whether they are compliant or not.</p>\n<h2>Core Concepts</h2>\n<p>To start using the AWS Config, the first thing you need to do is to configure a <strong>Configuration Recorder</strong> which will be responsible for storing the Configuration Items in a S3 Bucket. <strong>Configuration Items</strong> represents a point-in-time view of the various attributes of a resource. The S3 Bucket stores a <strong>Configuration History</strong> which is the collection of the Configuration Items for a given resource over time.</p>\n<p>When you Enable the AWS Config, you can also create <strong>Config Rules</strong> that represent the desired configuration setting for a given resource. There are two types of rules:</p>\n<ul>\n<li><strong>Managed Rules</strong>: Predefined, customizable rules created by AWS.</li>\n<li><strong>Custom rules</strong>: A rule you create using Lambda functions to evaluate the resource settings.</li>\n</ul>\n<p>You can use the <strong>Dashboard</strong> to identify which resources are compliant or noncompliant with the config rules you defined. Important to notice that AWS Config doesn't prevent the changes to happen, but, it can be <strong>trigger</strong> to other AWS Services <strong>to apply automatic remediation.</strong></p>\n<p>AWS Config also provides a <strong>Resource Inventory</strong> which are items that config discovered including deleted resources or resources that aren't being recorded.</p>\n<p>It's also possible to create <strong>Aggregators</strong> to aggregate data from multi-account and multi-region into one account, the aggregator account.</p>","frontmatter":{"title":"Config"},"isFile":true,"fileName":"config"},{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/management-and-governance/organizations.md","html":"<p><a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>AWS Organizations is a global service fully managed by AWS that enhances the multi-account experience in AWS by providing features that eases and centralizes the management of several accounts like consolidated billing, controlling organization policies with Service control policies and hierarchical grouping of accounts.</p>\n<h2>Core concepts</h2>\n<p>When you enable the AWS Organizations with a Standard AWS Account (not a member of an AWS Organization) an <strong>Organizational Root</strong> is created, this represents the very top of the organizational hierarchical structure. Below the root, you can add member accounts, the master account or organizational units.</p>\n<p>The <strong>master account</strong>, or management account, is the same AWS Standard Account that enabled the organization. This account becomes the management account upon the enablement. Through this account you can invite other standard account to your organization or even create new member accounts. This account is also known as payer account, due to the <strong>consolidated billing</strong> Organizations provide, all the payment information and billing are managed/accessed through this account.</p>\n<p>AWS Organization also adds the concept of <strong>Organizational Units</strong> which can be used to group member accounts and other OU. These containers can only have 1 parent.</p>\n<p>In addition, AWS Organizations adds <strong>Service Control Policies</strong> that can determine the maximum permissions are allowed in the organizational root, organizational unit and accounts. The SCP do not grant access they work like permissions boundaries limiting what the account can do. Even though the root user cannot be denied access, SCP can reduce the scope of accounts, which will ignore the privileges an root user.</p>\n<p>SCP can be used in two ways:</p>\n<ul>\n<li>Deny List: Default behavior. SCP gives full access. Adds rules denying services in the account.</li>\n<li>Allow List: Remove SCP full access. Adds rules allowing specific services in the account.</li>\n</ul>","frontmatter":{"title":"Organizations"},"isFile":true,"fileName":"organizations"}],"folders":[]}},
    "staticQueryHashes": ["1507822185","2095566405","2894216461","425755332"]}