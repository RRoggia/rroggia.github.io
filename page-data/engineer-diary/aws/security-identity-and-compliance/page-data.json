{
    "componentChunkName": "component---src-templates-folder-template-js",
    "path": "/engineer-diary/aws/security-identity-and-compliance",
    "result": {"pageContext":{"parentPath":"/engineer-diary/aws/security-identity-and-compliance","files":[{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/security-identity-and-compliance/identity-and-access-management.md","html":"<p><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>AWS Identity and Access Management service, as the name suggests, is one of the core service for securing AWS accounts through Authentication (Identity) and Authorization (Access).</p>\n<p>IAM is an AWS fully managed service that runs globally in an AWS Account. Therefore, the users, policies and other resources created in the service can be used across all the regions in an AWS account. In addition, because the service runs globally, it provides global resiliency, where all the regions must fail in order to the service have downtime.</p>\n<h2>Core concepts</h2>\n<p>A <strong>Principal</strong> is a person or application that uses the AWS account root user, an IAM user, or an IAM role to sign in (authentication) and make requests to AWS.</p>\n<p>IAM supports three types of <strong>identities</strong>:</p>\n<ul>\n<li><strong>Users</strong>: They represent users or applications. Each user represents only by 1 principal. They can have two types of credentials (Management console credentials and access keys) that provide long-term access to AWS resources.</li>\n<li><strong>Groups</strong>: Used to group a set of IAM users.</li>\n<li><strong>Roles</strong>: An identity that can be assumed by multiple principals that need temporary access to AWS resources.</li>\n</ul>\n<p>Both Users and Roles are considered <strong>Entities</strong> and can be used to identify a principal during the process of Authentication. Groups are not entities, and can't be used to identify principals.</p>\n<p>Identities can have <strong>Policies</strong> attached to it. Policies are used to specify what identities are allowed and not allowed to do. The policies are evaluated in every entity's request to AWS resources to determine whether the entity has permissions (authorization) to access the requested resource.</p>\n<h3>IAM Users</h3>\n<p>Anything requiring long-term access to AWS, for example, users and applications. Users will have two types of credentials.</p>\n<ul>\n<li>Management console: User and password to access the AWS Management console web application.</li>\n<li>Access Keys: For programmatically access of the AWS resources. User can have up to two access keys. Although, you generally will only use one key, the second key enables keys rotation without downtime.</li>\n</ul>\n<p>IAM supports up to 5000 IAM users per account. Therefore, there is restrictions in any architectures using IAM as their user base.</p>\n<p>Users can be member of up to 10 groups.</p>\n<h3>IAM Groups</h3>\n<p>Containers for users. You create groups to centrally manage the permissions of a group of users.  They don't have credentials, you cannot use it as identity during authentication and they can't be referenced as principal in resource base policies.</p>\n<h3>IAM Roles</h3>\n<p>Multiple principals that require short-term access to specific AWS resources, for example, several Lambda functions that need to access S3. A principal is not the role, it assumes the role.</p>\n<p>Roles support two types of policies:</p>\n<ul>\n<li><strong>Permission Policy</strong>: Like identity based permission they grant and deny privilege to execute actions on AWS resources.</li>\n<li><strong>Trust Policy</strong>: It's a required resource-based policy that is attached to a role and specifies which principals are trusted to assume the role. The principals can be entities, accounts and services.</li>\n</ul>\n<p>Use cases:</p>\n<ul>\n<li>AWS Service needs to use other AWS Service.</li>\n<li>Break glass for key: User has a set of permissions for daily basis, but can assume a role with more privilege in case of emergencies.</li>\n<li>Single Sign On or Organizations with more than 5000 identities: All developers could assume the development role to have access to the AWS Services required to develop.</li>\n<li>Cross account access</li>\n</ul>\n<h3>IAM Policies</h3>\n<p>Policies are used to grant or deny permission to execute actions on AWS resources. The policies are used after the authentication during the authorization evaluation process. Policies are JSON documents that can be attached to Identities.</p>\n<p>Policies can be inline or managed.</p>\n<ul>\n<li><strong>Inline</strong> policies are added directly to a resource. And it has one to one relationship with that resource. Therefore, it does not allow reuse.</li>\n<li>\n<p><strong>Managed</strong> policies are standalone IAM resources. It's whole lifecycle is managed through IAM. You can create a policy and attach the same policy to several identities.</p>\n<ul>\n<li>AWS Managed: AWS manages this Policies. A set is available by default.</li>\n<li>Customer managed: You manage it.</li>\n</ul>\n</li>\n</ul>\n<p>There are several types of Policies:</p>\n<ul>\n<li><strong>Identity-based</strong>: Identity-based policies grant permissions to an identity.</li>\n<li><strong>Resource-based</strong>: Inline policies attached to a resource. They grant permission to the principal that is specified in the policy. An example is Role Trust Policy.</li>\n<li><strong>Service Control Policy</strong>: Used by AWS Organizations to determine maximum permissions accounts, or organizational structures can have.</li>\n</ul>\n<p>...</p>\n<h4>Policy Evaluation</h4>\n<p>Policies are evaluated following this rules:</p>\n<ol>\n<li>Explicit Deny</li>\n<li>Explicit Allow</li>\n<li>Implicit Deny</li>\n</ol>\n<p>During the evaluation, all the statements from all policies attached to the principal requesting the resource are merged and processed together following the rules described above.</p>\n<p>Therefore, consider that if you don't Explicit Allow permissions, the default behavior is the Implicit Deny. And also, even if you had Explicit Allow permission for a resource, if you have an Explicit Deny, you'll not be able to access the resource.</p>\n<h2>Examples</h2>\n<p>This is an example of an IAM Policy that gives admintrator access, meaning, all actions in all services are allowed.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Effect&quot;: &quot;Allow&quot;,\n            &quot;Action&quot;: &quot;*&quot;,\n            &quot;Resource&quot;: &quot;*&quot;\n        }\n    ]\n}</code>\n        </deckgo-highlight-code>\n<p>You read the JSON like this:</p>\n<ul>\n<li>(Optional) Sid: An identifier for the statement. It can be used to describe the statement.</li>\n<li><strong>Effect</strong>: Either \"Allow\" or \"Deny\" access</li>\n<li><strong>Action</strong>: Determines the API calls the policy is referring to</li>\n<li><strong>Resource</strong>: Determines which AWS Resource the policy is referring to</li>\n<li>(Optional) <strong>Condition</strong>: It brings flexibility to the policies to support all scenarios</li>\n</ul>","frontmatter":{"title":"IAM - Identity and Access Management"},"isFile":true,"fileName":"identity-and-access-management"},{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/security-identity-and-compliance/key-management-service.md","html":"<p><a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/overview.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>KMS is a regional service that eases the management of cryptographic keys and encryption/decryption of data. KMS integrates with several AWS services to encrypt data in transfer and at rest.</p>\n<h2>Core Concepts</h2>\n<p>The core concept in KMS are the <strong>Keys</strong>, which are composed by metadata and the cryptographic material. There's three possibilities to whom manages a key:</p>\n<ul>\n<li>\n<p><strong>Customer Managed</strong>: You create and manages the keys. Highly configurable.</p>\n<ul>\n<li>You are responsible for setting the security policies, rotating their cryptographic material and much more.</li>\n</ul>\n</li>\n<li>\n<p><strong>AWS Managed</strong>: AWS creates and manages the keys in your account. You cannot use it, the services uses in your behalf. Has the visibility, but no control.</p>\n<ul>\n<li>Keys rotates automatically every year</li>\n</ul>\n</li>\n<li><strong>Owned Keys</strong>: AWS manages the keys in their account. No visibility, and no control.</li>\n</ul>\n<p>It's important to notice that the key cryptographic material never leaves AWS, with the exception of the key's public key.</p>\n<p>When creating the key you need to specify the Key's <strong>Encryption Type</strong>, it varies from:</p>\n<ul>\n<li>\n<p><strong>Symmetric</strong>: You use the same key for encryption and decryption.</p>\n<ul>\n<li>HMAC</li>\n</ul>\n</li>\n<li>\n<p><strong>Asymmetric</strong>: You have two keys, one public and one private. You use both for encryption and decryption or signing and verifying messages.</p>\n<ul>\n<li>Sign and Verify</li>\n</ul>\n</li>\n</ul>\n<p>You can also choose the Key's <strong>Regionality</strong> whether is going to be used in a <strong>Single Region</strong> or in <strong>Multi Region</strong>. In Multi Region keys, they are replicated in other regions.</p>\n<h3>Encryption And Decryption</h3>\n<h4>Symmetric</h4>\n<p>You can use the <code>KMS:Encrypt</code> and <code>KMS::Decrypt</code> methods to directly encrypt data. </p>\n<ol>\n<li>Send to the <strong>encrypt</strong> method the <code>KeyId</code>, the <code>Plaintext</code> (the data to be encrypted) and the <code>EncryptionAlgorithm</code> . The API returns the <code>CiphertextBlob</code> which is the data encrypted.</li>\n<li>Call the <strong>decrypt</strong> method with the <code>KeyId</code> and <code>CiphertextBlob</code>. The API returns the data decrypted. </li>\n</ol>\n<h3>Data Keys (Data Encryption Keys)</h3>\n<p>KMS can generate <strong>Data keys</strong> to encrypt large amount of data outside KMS. The Data keys implement the pattern called <strong>Envelope encryption</strong>. </p>\n<ol>\n<li>Encrypts the data with a <strong>Plaintext key</strong></li>\n<li>Encrypts the <strong>Plaintext key</strong> with <strong>KMS key</strong></li>\n<li>Discard the <strong>Plaintext key</strong></li>\n<li>Store the <strong>Encrypted plaintext key</strong></li>\n<li>Decripts the <strong>Encrypted plaintext key</strong> with <strong>KMS Key</strong></li>\n<li>Decripts the data with plaintext key </li>\n</ol>\n<p>KMS do not uses data key to do cryptographic operations, however, you can data keys together with <strong>AWS Encryption SDK</strong>.</p>\n<p>To generate the Data Keys you can use the <code>GenerateDataKey</code> API for immediate use or the <code>GenerateDataKeyWithoutPlaintext</code> to use together with <code>Decrypt</code> in a future use. Similarly, the <code>GenerateDataKeyPair</code> and <code>GenerateDataKeyPairWithoutPlaintext</code> can be used for asymmetric keys.</p>","frontmatter":{"title":"Key Management Service - KMS"},"isFile":true,"fileName":"key-management-service"},{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/security-identity-and-compliance/shield.md","html":"<p><a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/shield-chapter.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>AWS Shield is an AWS fully managed service that provides protection against DDoS attacks for AWS resources at the layers network, transport and application (respectively 3,4 and 7) of the OSI Model.</p>\n<h2>Core Concepts</h2>\n<p>AWS Shield offers two types of service <strong>Standard</strong> and <strong>Advanced</strong>.</p>\n<p>The <strong>Shield Standard</strong> service is a managed threat protection service that protects the perimeter of your application. The perimeter an AWS Region in case of a VPC, or edge of the AWS network when using Route 53, Cloud Front or Global Accelerator. Standard Shield provides DDoS detection for network and transport layers automatically and at no additional cost.</p>\n<p>The <strong>Shield Advanced</strong> service provides higher levels of protection against attacks. When you subscribe to the Advanced service, you add resources to protect. These resources range from EC2, ELB, Route 53 hosted zones, Cloud Front distributions and more.</p>\n<p>Shield integrates with WAF to create Web ACLs, rules and rule groups. In addition, uses WAF to <strong>automatic mitigate and respond DDoS at the application layer</strong>. It also enhances the visibility into DDoS events and attacks with real-time metrics and reports of your protected resources.</p>\n<p>Perhaps, two of the most important feature of Advanced are the <strong>Proactive Engagement and the Shield Response Team (SRT)</strong>. The SRT is experienced in protecting AWS and they are a point of contact for you at any time for assistance during an attack. The proactive engagement goes one step further with the SRT contacting you when the Health based checks you created are unhealthy. </p>","frontmatter":{"title":"Shield"},"isFile":true,"fileName":"shield"},{"fileAbsolutePath":"/home/runner/work/rroggia.github.io/rroggia.github.io/content/engineer-diary/AWS/security-identity-and-compliance/web-application-firewall.md","html":"<p><a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">Documentation</a></p>\n<h2>Overview</h2>\n<p>WAF is a web application firewall fully managed by AWS regionally. WAF runs in the application layer L7 of the OSI Model and it can be used to verify all the traffic entering the regional and global resources. It can be used to reduce the attack scope for SQL Injections, scripting or DDoS attacks. WAF integrates with CloudFront, API Gateway, ALB, APP Sync and Cognito.</p>\n<h2>Core Concepts</h2>\n<p>WAF allows you to create <strong>Web Access Control List</strong>. When creating a WACL you define the resource type you are going to protect either <strong>global</strong> (CloudFront Distributions) or <strong>regional</strong> for (ALB, API Gateways, APP Sync and Cognito) and which are the resources you want to protect.</p>\n<p>You can configure WACL's default behavior for requests that do not match rules. You can either allow all traffic or block it. A WACL contains a protection strategy that is defined by <strong>rules</strong> and <strong>rules groups</strong>.</p>\n<p>A Rule describe what the firewall will evaluate in the traffic. Rules can be created in a rule group for reuse, or within a WACL. There are two types of rules, it can be either <strong>regular</strong>, something occurred, or <strong>rate</strong> based, something occurred at certain rate. The rule's <strong>statement</strong> describes what the firewall will inspect in the request and it can use almost any component of HTTP requests like headers, body, query strings, the HTTP method, and the IP or where's the traffic origin. You can use AND, OR , NOT or a single statements to create a rule.</p>\n<p>If a request matches the statement of a rule the WAF will trigger the rule's <strong>action</strong>. They can be as simple as Allow or Block which will terminate the rules evaluation. They can be Challenges or Captcha to determine the requests aren't coming from a bot, the requests are blocked if they fail the puzzle/challenge. I can also be a Count which the firewall triggers the action but continues the processing after it.</p>\n<p>Allow, Count and Captcha allow you to add request headers to the request. All actions support the addition of labels that can be used of a multi-stage flow. The allow action do not support rate based rules.</p>\n<p>A rule groups is a set of rules that can be reused across several WACL. Roule groups can be custom or a Managed (AWS or AWS Marketplace sellers) groups.</p>\n<p>The <strong>WCU</strong> is the capacity unit that WAF uses to size the resources that will evaluate the rules. When you create a rule AWS assigns a rule capacity that determines the <strong>WCU</strong>. Rule groups must specify how much capacity they'll use and it cannot be changed later. WACL has a limit of 1500 WCU.</p>\n<p>You can also enable the WACL to send <strong>logging data</strong> to S3, CloudWatch Logs or Kinesis Data Firehose. This data describes the time, resources, detailed information on the request and about the rules that matched.</p>","frontmatter":{"title":"WAF - Web Application Firewall"},"isFile":true,"fileName":"web-application-firewall"}],"folders":[]}},
    "staticQueryHashes": ["1507822185","2095566405","2894216461","425755332"]}