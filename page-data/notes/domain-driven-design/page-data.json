{"componentChunkName":"component---src-templates-note-template-js","path":"/notes/domain-driven-design","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Domain Driven Design","date":"2021-04-04","published":null,"tags":null},"tableOfContents":"<ul>\n<li><a href=\"#introdu%C3%A7%C3%A3o\">Introdução</a></li>\n<li>\n<p><a href=\"#pref%C3%A1cio\">Prefácio</a></p>\n<ul>\n<li><a href=\"#o-desafio-da-complexidade\">O desafio da complexidade</a></li>\n<li><a href=\"#design-versus-processo-de-desenvolvimento\">Design <em>versus</em> processo de desenvolvimento</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#i---colocando-o-modelo-de-dom%C3%ADnio-em-a%C3%A7%C3%A3o\">I - Colocando o modelo de domínio em ação</a></p>\n<ul>\n<li><a href=\"#meu-sum%C3%A1rio\">Meu Sumário</a></li>\n<li><a href=\"#um---assimilando-o-conhecimento\">UM - Assimilando o conhecimento</a></li>\n</ul>\n</li>\n</ul>","html":"<h1>Introdução</h1>\n<blockquote>\n<p>Se você estiver tentando adicionar automação a uma empresa humana complicada, seu software não tem como fugir dessa complexidade - tudo que ele pode fazer é controla-la.</p>\n</blockquote>\n<blockquote>\n<p>Mas a lição aprendida com a experiência de Eric é que os modelos de domínio verdadeiramente bons evoluem com o tempo, e até mesmo os modeladores mais experientes acreditam que adquirem suas melhores ideias após o lançamento inicial de um sistema.</p>\n</blockquote>\n<h1>Prefácio</h1>\n<blockquote>\n<p>Uma característica comum aos sucessos obtidos foi um modelo de domínio rico que evoluiu através de iterações de design e passaram a fazer parte do tecido que compunha o projeto.</p>\n</blockquote>\n<h2>O desafio da complexidade</h2>\n<blockquote>\n<p>Quando a complexidade foge ao controle os desenvolvedores já não podem entender o software bem o suficiente para alterá-lo ou expandi-lo com facilidade e segurança. Por outro lado, um bom design pode criar oportunidades para explorar essas características complexas.</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>Na maioria dos projetos de software, o principal foco de ser o domínio e a lógica do domínio.</li>\n<li>Designs de domínio complexos devem se basear em um modelo.</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>O DDD é uma maneira de pensar e um conjunto de prioridades, voltado para a aceleração de projetos de software que tem que trabalhar com domínios complicados.</p>\n</blockquote>\n<h2>Design <em>versus</em> processo de desenvolvimento</h2>\n<blockquote>\n<p>É uma colaboração entre quem conhece o domínio e quem sabe como construir softwares.</p>\n</blockquote>\n<blockquote>\n<p>Embora o medo de exigências não antecipadas geralmente leve ao exagero na área de engenharia, a tentativa de se evitar o exagero na engenharia pode se transformar em outro medo, o medo de raciocinar profundamente sobre o design.</p>\n</blockquote>\n<h1>I - Colocando o modelo de domínio em ação</h1>\n<blockquote>\n<p>Mapas são modelos, e cada modelo representa algum aspecto da realidade com uma ideia que seja de interesse. Um modelo é uma simplificação. Ele é uma interpretação da realidade que destaca os aspectos relevantes para resolver o problema que se tem em mãos ignorando os detalhes estranhos.</p>\n</blockquote>\n<blockquote>\n<p>(O modelo) Ele não é simplesmente o conhecimento existente na cabeça de um especialista em domínios; <em>ele é uma abstração rigorosamente organizada e seletiva daquele conhecimento.</em></p>\n</blockquote>\n<blockquote>\n<p>O coração do software está na sua capacidade de resolver problemas relacionados ao domínio para o seu usuário. Todas as outras características, por mais vitais que possam ser, se apoiam nessa finalidade básica.</p>\n</blockquote>\n<blockquote>\n<p>A complexidade existente no coração de um software deve ser enfrentada cara a cara. Qualquer tentativa de se fazer o contrário é arriscar a irrelevância.</p>\n</blockquote>\n<blockquote>\n<p>Um desenvolvedor de software tem essa mesma perspectiva quando se depara com um domínio complicado e que nunca foi formalizado. Criar um modelo lúcido que elimine essa complexidade é algo excitante.</p>\n</blockquote>\n<h2>Meu Sumário</h2>\n<p>Mapas são modelos que representam aspectos da realidade. Uma simplificação da realidade. Programas de software estão relacionados com domínios de negócio. Modelos ajudam em estruturar o conhecimento necessário para criar o software de forma simplificada.</p>\n<p>O foco dos modelos é transmitir o conhecimento, e não detalhar todo o conhecimento existente.</p>\n<p>Um modelo DDD tem 3 utilidades básicas:</p>\n<ol>\n<li><em>O modelo e o coração do design dão forma um ao outro</em>: Modelo e implementação tem ligação intima.</li>\n<li><em>O modelo é a espinha dorsal de uma linguagem utilizada por todos os membros da equipe</em>: Linguagem de comunicação entre desenvolvedores e especialistas.</li>\n<li><em>O modelo é um conhecimento destilado</em>: É a forma que a equipe entende e estrutura o sistema. É dinâmico e evolui.</li>\n</ol>\n<p>O coração do software está na capacidade de resolver problemas do domínio. Se o domínio é muito complexo, deve-se enfrentar a complexidade para tentar reduzi-la.</p>\n<h2>UM - Assimilando o conhecimento</h2>"}},"pageContext":{"title":"Domain Driven Design"}},"staticQueryHashes":["1507822185","2095566405","2894216461","425755332"]}