{"componentChunkName":"component---src-templates-note-template-js","path":"/notes/rfc7522---security-assertion-markup-language-(saml)-2.0-profile-for-oauth-2.0-client-authentication-and-authorization-grants","result":{"data":{"markdownRemark":{"frontmatter":{"title":"RFC7522 - Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants","date":"2018-06-01","published":null,"tags":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-introduction\">1. Introduction</a></p>\n<ul>\n<li><a href=\"#11-notational-conventions\">1.1. Notational Conventions</a></li>\n<li><a href=\"#12-terminology\">1.2. Terminology</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-http-parameter-bindings-for-transporting-assertions\">2. HTTP Parameter Bindings for Transporting Assertions</a></p>\n<ul>\n<li><a href=\"#21-using-saml-assertions-as-authorization-grants\">2.1. Using SAML Assertions as Authorization Grants</a></li>\n<li><a href=\"#22-using-saml-assertions-for-client-authentication\">2.2. Using SAML Assertions for Client Authentication</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-assertion-format-and-processing-requirements\">3. Assertion format and Processing Requirements</a></p>\n<ul>\n<li><a href=\"#31-authorization-grant-processing\">3.1. Authorization Grant Processing</a></li>\n<li><a href=\"#32-client-authorization-processing\">3.2. Client Authorization Processing</a></li>\n</ul>\n</li>\n<li><a href=\"#4-authorization-grant-example\">4. Authorization Grant Example</a></li>\n<li><a href=\"#5-interoperability-considerations\">5. Interoperability Considerations</a></li>\n<li><a href=\"#6-security-considerations\">6. Security Considerations</a></li>\n<li><a href=\"#7-privacy-considerations\">7. Privacy Considerations</a></li>\n<li><a href=\"#8-iana\">8. IANA</a></li>\n</ul>","html":"<p><a href=\"https://tools.ietf.org/html/rfc7522\">Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</a></p>\n<h1>1. Introduction</h1>\n<p>The Security Assertion Markup Language 2.0 is an XML-based framework that allows identity and security information to be shared across security domains.</p>\n<p>SAML is defined by another specification. <code>OASIS.saml-core-2.0-os</code>.</p>\n<p>SAML is primarily targeted at providing cross domain Web browser single sign-on.</p>\n<p>The assertion, an XML security token, defined by the SAML specification is often used by other protocols and specs.</p>\n<p>An Identity Provider issues Assertions.</p>\n<p>A Service Provider relies on its content to identify the Assertion's subject for security-related purposes.</p>\n<p>After that, the specification gives a small overview about OAuth 2.0 (RFC 6749) and the use of assertions as authentication grant/ client credentials (RFC 7521).</p>\n<p>This specification defines two main things:</p>\n<ol>\n<li>How a SAML assertion can be used to request an access token when a client wishes to utilize an existing trust relationship (SAML Assertion), without a direct user approval step at the authorization server.</li>\n<li>How a SAML can be used as a client authentication mechanism.</li>\n</ol>\n<h2>1.1. Notational Conventions</h2>\n<p>Uses keywords as described in RFC 2119.</p>\n<h2>1.2. Terminology</h2>\n<p>As described in the RFC6749, RFC 7521 and OASIS.saml-core-2.0-os.</p>\n<h1>2. HTTP Parameter Bindings for Transporting Assertions</h1>\n<p>Same parameters as defined in the RFC7521.</p>\n<h2>2.1. Using SAML Assertions as Authorization Grants</h2>\n<p>As described in the section 4.1 of the RFC7521.</p>\n<p>The value of <code>grant_type</code> parameter is <code>urn:ietf:params:oauth:grant-type:saml2-bearer</code>.</p>\n<p>The value of <code>assertion</code> parameter is contains a single SAML 2.0 Assertion encoded by <code>base64url</code>.</p>\n<p>The <code>scope</code> parameter may be used to indicate the request scope.</p>\n<p>Authentication of the client is optional.</p>\n<p>Same example as RFC7521 in the section 4.1.</p>\n<h2>2.2. Using SAML Assertions for Client Authentication</h2>\n<p>As described in the section 4.2 of the RFC7522.</p>\n<p>The value of <code>client_assertion_type</code> parameter is <code>urn:ietf:params:oauth:client-assertion-type:saml2-bearer</code></p>\n<p>The value of <code>client_assertion</code> parameter contains a single SAML 2.0 Assertion encoded by <code>base64url</code>.</p>\n<p>Same example as RFC7521 in the section 4.2.</p>\n<h1>3. Assertion format and Processing Requirements</h1>\n<p>Authorization server must validate the Assertion according to the criteria below.</p>\n<ol>\n<li>Assertion's Issuer has an unique identifier.</li>\n<li>It must have an <code>&#x3C;Conditions></code> element with an <code>&#x3C;AudiencRestriction></code> element with an <code>&#x3C;Audience></code> element that identifies the authorization server as audience.</li>\n<li>\n<p>The Assertion must have an <code>&#x3C;Subject></code> element that identifies the principal that is the subject of the Assertion.</p>\n<ol>\n<li>Authorization grant: Resource Owner or authorized delegate.</li>\n<li>Client authentication: the <code>client_id</code>.</li>\n</ol>\n</li>\n<li>The assertion must have expiry. Either as the <code>&#x3C;Conditions NotOnOrAfter=\"\"></code> or <code>&#x3C;SubjectConfirmationData NotOnOrAfter=\"\"></code>.</li>\n<li>The <code>&#x3C;Subject></code>must have at least one <code>&#x3C;SubjectConfirmation></code>.</li>\n<li>The authorization server rejects the Assertion if the expiry instant has passed.</li>\n<li>Should contain a single <code>&#x3C;AuthnStatement></code> if the assertion issuer directly authenticated the subject.</li>\n<li>May have <code>AttributeStatement</code>.</li>\n<li>The Assertion must be digitally signed or have a MAC applied by the issuer.</li>\n<li>The assertion may have encrypted elements.</li>\n<li>The authorization server must reject an Assertion that is not valid in all other respects per SAML specification.</li>\n</ol>\n<h2>3.1. Authorization Grant Processing</h2>\n<p>Assertion authorization grant may be used with or without client authentication or identification. </p>\n<p>If client credentials are presented in the request, the authorization server must validate them.</p>\n<p>If the assertion is not valid, the server creates a error response as defined by the OAuth 2.0.</p>\n<p>The <code>error</code> parameter must be <code>invalid_grant</code>.</p>\n<h2>3.2. Client Authorization Processing</h2>\n<p>If the client authorization is not valid the authorization server response follows the OAuth 2.0 structure.</p>\n<p>The <code>error</code> parameter must be <code>Ã¬nvalid_client</code>.</p>\n<h1>4. Authorization Grant Example</h1>\n<p>The Assertion is issued and signed by the SAML Identity Provider (\"<a href=\"https://saml-idp.example.com%22\">https://saml-idp.example.com\"</a>).</p>\n<p>The subject of the assertion is identified by email address (\"brian@example.com\"). He authenticated to the Identity Provider through digital signature.</p>\n<p>The intended audience is \"<a href=\"https://saml-sp.example.net%22\">https://saml-sp.example.net\"</a>, which is an SAML Service Provider. The authorization service identifies itself to the SAML Service Provider.</p>\n<p>The assertion is sent as part of an access token request to the authorization server.</p>\n<p>The specification contains an assertion as example.</p>\n<h1>5. Interoperability Considerations</h1>\n<p>Very similar to the RFC 7521.</p>\n<h1>6. Security Considerations</h1>\n<p>Same security considerations as the applicable to the RFC 6749, RFC 7521 and SAML 2.0.</p>\n<h1>7. Privacy Considerations</h1>\n<p>An assertion may contain privacy-sensitive information, therefore, use TLS and encrypt this information.</p>\n<h1>8. IANA</h1>\n<p>Registers the values <code>grant-type:saml2-bearer</code> and <code>client-assertion-type:saml2-bearer</code> .</p>"}},"pageContext":{"title":"RFC7522 - Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants"}},"staticQueryHashes":["1507822185","2095566405","2894216461","425755332"]}