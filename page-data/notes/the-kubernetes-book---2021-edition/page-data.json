{"componentChunkName":"component---src-templates-note-template-js","path":"/notes/the-kubernetes-book---2021-edition","result":{"data":{"markdownRemark":{"frontmatter":{"title":"The Kubernetes Book - 2021 edition","date":"2022-07-06","published":null,"tags":null},"tableOfContents":"<ul>\n<li><a href=\"#8-ingress\">8 Ingress</a></li>\n</ul>","html":"<h1>8 Ingress</h1>\n<blockquote>\n<p>Ingress is all about accessing multiple web applications through a single LoadBalancer Service.</p>\n</blockquote>\n<blockquote>\n<p>Ingress fixes this by exposing multiple Services through a single cloud load-balancer.</p>\n</blockquote>\n<blockquote>\n<p>It creates a LoadBalancer Service, on port 80 or 443, and uses host-based and path-based routing to send traffic\nto the correct backend Service.</p>\n</blockquote>\n<blockquote>\n<p>The object spec defines rules that govern traffic routing, and the controller implements the rules.</p>\n</blockquote>\n<blockquote>\n<p>Once you have an Ingress controller, you deploy Ingress objects with rules that govern how traffic hitting the\nIngress is routed.</p>\n</blockquote>\n<blockquote>\n<p>On the topic of routing, Ingress operates at layer 7 of the OSI model, also known as the “application layer”. This\nmeans it has awareness of HTTP headers, and can inspect them and forward traffic based on hostnames and\npaths.</p>\n</blockquote>\n<blockquote>\n<p>Ingress exposes multiple ClusterIP Services through a single cloud load-balancer.</p>\n</blockquote>\n<blockquote>\n<p>The way Kubernetes knows which Ingress controller to use when you deploy an Ingress object is via Ingress\nclasses. You create Ingress classes, and then tag Ingress objects with a particular class.</p>\n</blockquote>"}},"pageContext":{"title":"The Kubernetes Book - 2021 edition"}},"staticQueryHashes":["1507822185","2095566405","2894216461","425755332"]}