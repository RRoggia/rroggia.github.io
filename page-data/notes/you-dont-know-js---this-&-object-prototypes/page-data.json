{
    "componentChunkName": "component---src-templates-note-template-js",
    "path": "/notes/you-dont-know-js---this-&-object-prototypes",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"You Dont know JS - this & Object Prototypes","date":"2022-12-26","published":null,"tags":null},"tableOfContents":"<ul>\n<li><a href=\"#chapter-1-this-or-that\">Chapter 1: <code>this</code> Or That?</a></li>\n</ul>","html":"<h1>Chapter 1: <code>this</code> Or That?</h1>\n<blockquote>\n<p>However, the <code>this</code> mechanism provides a more elegant way of implicitly \"passing along\" an object reference, leading to cleaner API design and easier re-use.</p>\n</blockquote>\n<blockquote>\n<p>To be clear, <code>this</code> does not, in any way, refer to a function's <strong>lexical scope</strong>. </p>\n</blockquote>\n<blockquote>\n<p>You cannot use a <code>this</code> reference to look something up in a lexical scope. It is not possible.</p>\n</blockquote>\n<blockquote>\n<p>It is contextual based on the conditions of the function's invocation. <code>this</code> binding has nothing to do with where a function is declared, but has instead everything to do with the manner in which the function is called.</p>\n</blockquote>\n<blockquote>\n<p>When a function is invoked, an activation record, otherwise known as an execution context, is created. This record contains information about where the function was called from (the call-stack), <em>how</em> the function was invoked, what parameters were passed, etc. One of the properties of this record is the <code>this</code> reference which will be used for the duration of that function's execution.</p>\n</blockquote>"}},"pageContext":{"title":"You Dont know JS - this & Object Prototypes"}},
    "staticQueryHashes": ["1507822185","2095566405","2894216461","425755332"]}